package Gallhp;

import java.awt.Cursor;

import javax.swing.SwingWorker;

import Tpdahp.Tpdahp;
import Tpdohp.Tpdohp;
import Tpfahp.Tpfahp;
import Twfahp.Twfahp;
import edu.gatech.hp.HeatedPlateSimulator;

/**
 * 
 * @author jsoto
 */
public class Gallhp extends javax.swing.JFrame{

    /**
	 * Generated using eclipse.
	 */
	private static final long serialVersionUID = 3573381654055027510L;
	
	SimulationTask worker;
    
    private class SimulationTask extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            
            // disable controls
            enableControls(false);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
            // get input
            int d = Integer.parseInt(dField.getText());
            int l = Integer.parseInt(lField.getText());
            int t = Integer.parseInt(tField.getText());
            int r = Integer.parseInt(rField.getText());
            int b = Integer.parseInt(bField.getText());
            
            // reset results area
            resultsArea.setText("");
        
            // perform simulation
            HeatedPlateSimulator simulator = (HeatedPlateSimulator) selector.getSelectedItem();
            String result = simulator.execute(d, l, r, t, b);
        
            // publish results
            resultsArea.setText(result);
            
            enableControls(false);
            return null;
        }
        
        @Override
        public void done() {
            enableControls(true);
            setCursor(Cursor.getDefaultCursor());
        }
    }
    
    /**
     * Creates new form Demo
     */
    public Gallhp() {
        initComponents();
        loadSimulators();
    }
    
    /**
     * Loads the different HeatedPlateSimulator implementations to
     * the simulators list.
     */
    private void loadSimulators() {
        // add Tpdah
        Tpdahp tpdahp = new Tpdahp();
        selector.addItem(tpdahp);
        // add Tpdohp
        Tpdohp tpdohp = new Tpdohp();
        selector.addItem(tpdohp);        
        // add Tpfahp
        Tpfahp tpfahp = new Tpfahp();
        selector.addItem(tpfahp);        
        // add Twfahp
        Twfahp twfahp = new Twfahp();
        selector.addItem(twfahp);
    }
    
    /**
     * @return if the simulation input is valid
     */
    private boolean validateInput() {
    	try {
        	// get inputs
            int d = Integer.parseInt(dField.getText());
            int l = Integer.parseInt(lField.getText());
            int t = Integer.parseInt(tField.getText());
            int r = Integer.parseInt(rField.getText());
            int b = Integer.parseInt(bField.getText());
            
            // validate ranges
            
    		if(d<=0) {
    			throw new IllegalArgumentException("d must be a positive integer greater than 0");
    		}
    		
    		if(l<0 || l>100) {
    			throw new IllegalArgumentException("l must be an integer between 0 and 100");
    		}
    		
    		if(r<0 || r>100) {
    			throw new IllegalArgumentException("r must be an integer between 0 and 100");
    		}
    		
    		if(t<0 || t>100) {
    			throw new IllegalArgumentException("t must be an integer between 0 and 100");
    		}
    		
    		if(b<0 || b>100) {
    			throw new IllegalArgumentException("b must be an integer between 0 and 100");
    		}
    	} catch (NumberFormatException e) {
    		resultsArea.setText("Invalid input: d, l, t, r, and b must be integers");
    		return false;
    	} catch (IllegalArgumentException e) {
    		resultsArea.setText(e.getMessage());
    		return false;
    	}
    	
        return true;
    }
    
    /**
     * Disable or enable controls
     * @param enable indicates if controls should be enabled or disabled
     */
    private void enableControls(boolean enable) {
        // disable inputs
        dField.setEnabled(enable);
        lField.setEnabled(enable);
        tField.setEnabled(enable);
        rField.setEnabled(enable);
        bField.setEnabled(enable);
        
        // disable buttons
        simulateButton.setEnabled(enable);
        
        // disable selector
        selector.setEnabled(enable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
       
    	resultsPanel = new javax.swing.JScrollPane();
        resultsArea = new javax.swing.JTextArea();
        dLabel = new javax.swing.JLabel();
        lLabel = new javax.swing.JLabel();
        tLabel = new javax.swing.JLabel();
        rLabel = new javax.swing.JLabel();
        bLabel = new javax.swing.JLabel();
        dField = new javax.swing.JTextField();
        lField = new javax.swing.JTextField();
        tField = new javax.swing.JTextField();
        rField = new javax.swing.JTextField();
        bField = new javax.swing.JTextField();
        selector = new javax.swing.JComboBox();
        simulateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resultsArea.setEditable(false);
        resultsArea.setColumns(20);
        resultsArea.setRows(5);
        resultsPanel.setViewportView(resultsArea);

        dLabel.setText("d");

        lLabel.setText("l");

        tLabel.setText("t");

        rLabel.setText("r");

        bLabel.setText("b");

        simulateButton.setBackground(new java.awt.Color(42, 82, 229));
        simulateButton.setForeground(java.awt.Color.white);
        simulateButton.setText("Simulate");
        simulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulate(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(228, 60, 60));
        cancelButton.setForeground(java.awt.Color.white);
        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dLabel)
                            .addComponent(lLabel)
                            .addComponent(tLabel)
                            .addComponent(rLabel)
                            .addComponent(bLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bField)
                            .addComponent(rField)
                            .addComponent(tField)
                            .addComponent(lField)
                            .addComponent(dField)))
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(simulateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(selector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dLabel)
                            .addComponent(dField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lLabel)
                            .addComponent(lField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tLabel)
                            .addComponent(tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rLabel)
                            .addComponent(rField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bLabel)
                            .addComponent(bField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(simulateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addGap(0, 172, Short.MAX_VALUE))
                    .addComponent(resultsPanel))
                .addContainerGap())
        );

        pack();
    }

    private void simulate(java.awt.event.ActionEvent evt) {
        if(!validateInput()) {
            return;
        }
        
        // execute simulation
        worker = new SimulationTask();
        worker.execute();
    }

    // Variables declaration
    private javax.swing.JTextField bField;
    private javax.swing.JLabel bLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField dField;
    private javax.swing.JLabel dLabel;
    private javax.swing.JTextField lField;
    private javax.swing.JLabel lLabel;
    private javax.swing.JTextField rField;
    private javax.swing.JLabel rLabel;
    private javax.swing.JTextArea resultsArea;
    private javax.swing.JScrollPane resultsPanel;
    private javax.swing.JComboBox selector;
    private javax.swing.JButton simulateButton;
    private javax.swing.JTextField tField;
    private javax.swing.JLabel tLabel;
    // End of variables declaration
	
}
